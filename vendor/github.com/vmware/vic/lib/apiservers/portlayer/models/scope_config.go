package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScopeConfig scope config
// swagger:model ScopeConfig
type ScopeConfig struct {

	// annotations
	Annotations map[string]string `json:"annotations,omitempty"`

	// dns
	DNS []string `json:"dns"`

	// endpoints
	Endpoints []*EndpointConfig `json:"endpoints"`

	// gateway
	Gateway string `json:"gateway,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// internal
	Internal bool `json:"internal,omitempty"`

	// ipam
	IPAM []string `json:"ipam"`

	// name
	// Required: true
	Name string `json:"name"`

	// scope type
	// Required: true
	ScopeType string `json:"scopeType"`

	// subnet
	Subnet string `json:"subnet,omitempty"`
}

// Validate validates this scope config
func (m *ScopeConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDNS(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEndpoints(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIPAM(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateScopeType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScopeConfig) validateDNS(formats strfmt.Registry) error {

	if swag.IsZero(m.DNS) { // not required
		return nil
	}

	return nil
}

func (m *ScopeConfig) validateEndpoints(formats strfmt.Registry) error {

	if swag.IsZero(m.Endpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.Endpoints); i++ {

		if swag.IsZero(m.Endpoints[i]) { // not required
			continue
		}

		if m.Endpoints[i] != nil {

			if err := m.Endpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScopeConfig) validateIPAM(formats strfmt.Registry) error {

	if swag.IsZero(m.IPAM) { // not required
		return nil
	}

	return nil
}

func (m *ScopeConfig) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *ScopeConfig) validateScopeType(formats strfmt.Registry) error {

	if err := validate.RequiredString("scopeType", "body", string(m.ScopeType)); err != nil {
		return err
	}

	return nil
}
