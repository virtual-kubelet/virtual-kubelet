package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ProcessConfig process config
// swagger:model ProcessConfig
type ProcessConfig struct {

	// env
	Env []string `json:"env"`

	// error msg
	ErrorMsg string `json:"errorMsg,omitempty"`

	// exec args
	ExecArgs []string `json:"execArgs"`

	// exec path
	ExecPath string `json:"execPath,omitempty"`

	// exit code
	ExitCode int32 `json:"exitCode,omitempty"`

	// pid
	Pid int64 `json:"pid,omitempty"`

	// start time
	StartTime int64 `json:"startTime,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// stop time
	StopTime int64 `json:"stopTime,omitempty"`

	// user
	User string `json:"user,omitempty"`

	// working dir
	WorkingDir *string `json:"workingDir,omitempty"`
}

// Validate validates this process config
func (m *ProcessConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnv(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExecArgs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessConfig) validateEnv(formats strfmt.Registry) error {

	if swag.IsZero(m.Env) { // not required
		return nil
	}

	return nil
}

func (m *ProcessConfig) validateExecArgs(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecArgs) { // not required
		return nil
	}

	return nil
}
