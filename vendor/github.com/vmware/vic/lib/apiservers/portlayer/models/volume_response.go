package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// VolumeResponse volume response
// swagger:model VolumeResponse
type VolumeResponse struct {

	// driver
	// Required: true
	Driver string `json:"Driver"`

	// this is the label used to mount the block device
	// Required: true
	Label string `json:"Label"`

	// metadata
	Metadata map[string]string `json:"Metadata,omitempty"`

	// name
	// Required: true
	Name string `json:"Name"`

	// store
	// Required: true
	Store string `json:"Store"`
}

// Validate validates this volume response
func (m *VolumeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDriver(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStore(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeResponse) validateDriver(formats strfmt.Registry) error {

	if err := validate.RequiredString("Driver", "body", string(m.Driver)); err != nil {
		return err
	}

	return nil
}

func (m *VolumeResponse) validateLabel(formats strfmt.Registry) error {

	if err := validate.RequiredString("Label", "body", string(m.Label)); err != nil {
		return err
	}

	return nil
}

func (m *VolumeResponse) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("Name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *VolumeResponse) validateStore(formats strfmt.Registry) error {

	if err := validate.RequiredString("Store", "body", string(m.Store)); err != nil {
		return err
	}

	return nil
}
