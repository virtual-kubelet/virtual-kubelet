package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ScopesAddContainerConfig scopes add container config
// swagger:model ScopesAddContainerConfig
type ScopesAddContainerConfig struct {

	// handle
	// Required: true
	Handle string `json:"handle"`

	// network config
	// Required: true
	NetworkConfig *NetworkConfig `json:"networkConfig"`
}

// Validate validates this scopes add container config
func (m *ScopesAddContainerConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHandle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetworkConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScopesAddContainerConfig) validateHandle(formats strfmt.Registry) error {

	if err := validate.RequiredString("handle", "body", string(m.Handle)); err != nil {
		return err
	}

	return nil
}

func (m *ScopesAddContainerConfig) validateNetworkConfig(formats strfmt.Registry) error {

	if err := validate.Required("networkConfig", "body", m.NetworkConfig); err != nil {
		return err
	}

	if m.NetworkConfig != nil {

		if err := m.NetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig")
			}
			return err
		}
	}

	return nil
}
