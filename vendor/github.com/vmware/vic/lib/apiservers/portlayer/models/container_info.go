package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ContainerInfo container info
// swagger:model ContainerInfo
type ContainerInfo struct {

	// host config
	HostConfig *HostConfig `json:"HostConfig,omitempty"`

	// container config
	ContainerConfig *ContainerConfig `json:"containerConfig,omitempty"`

	// data version
	DataVersion int64 `json:"dataVersion,omitempty"`

	// endpoints
	Endpoints []*EndpointConfig `json:"endpoints"`

	// process config
	ProcessConfig *ProcessConfig `json:"processConfig,omitempty"`

	// volume config
	VolumeConfig []*VolumeConfig `json:"volumeConfig"`
}

// Validate validates this container info
func (m *ContainerInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContainerConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEndpoints(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProcessConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVolumeConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerInfo) validateHostConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.HostConfig) { // not required
		return nil
	}

	if m.HostConfig != nil {

		if err := m.HostConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HostConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ContainerInfo) validateContainerConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.ContainerConfig) { // not required
		return nil
	}

	if m.ContainerConfig != nil {

		if err := m.ContainerConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("containerConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ContainerInfo) validateEndpoints(formats strfmt.Registry) error {

	if swag.IsZero(m.Endpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.Endpoints); i++ {

		if swag.IsZero(m.Endpoints[i]) { // not required
			continue
		}

		if m.Endpoints[i] != nil {

			if err := m.Endpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContainerInfo) validateProcessConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessConfig) { // not required
		return nil
	}

	if m.ProcessConfig != nil {

		if err := m.ProcessConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ContainerInfo) validateVolumeConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeConfig) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeConfig); i++ {

		if swag.IsZero(m.VolumeConfig[i]) { // not required
			continue
		}

		if m.VolumeConfig[i] != nil {

			if err := m.VolumeConfig[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeConfig" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}
