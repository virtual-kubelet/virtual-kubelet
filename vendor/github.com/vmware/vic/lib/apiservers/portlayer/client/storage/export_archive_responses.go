package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ExportArchiveReader is a Reader for the ExportArchive structure.
type ExportArchiveReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *ExportArchiveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewExportArchiveOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewExportArchiveNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewExportArchiveUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 423:
		result := NewExportArchiveLocked()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewExportArchiveInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewExportArchiveDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewExportArchiveOK creates a ExportArchiveOK with default headers values
func NewExportArchiveOK(writer io.Writer) *ExportArchiveOK {
	return &ExportArchiveOK{
		Payload: writer,
	}
}

/*ExportArchiveOK handles this case with default header values.

OK
*/
type ExportArchiveOK struct {
	Payload io.Writer
}

func (o *ExportArchiveOK) Error() string {
	return fmt.Sprintf("[GET /archive][%d] exportArchiveOK  %+v", 200, o.Payload)
}

func (o *ExportArchiveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportArchiveNotFound creates a ExportArchiveNotFound with default headers values
func NewExportArchiveNotFound() *ExportArchiveNotFound {
	return &ExportArchiveNotFound{}
}

/*ExportArchiveNotFound handles this case with default header values.

Supplied target not found
*/
type ExportArchiveNotFound struct {
}

func (o *ExportArchiveNotFound) Error() string {
	return fmt.Sprintf("[GET /archive][%d] exportArchiveNotFound ", 404)
}

func (o *ExportArchiveNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExportArchiveUnprocessableEntity creates a ExportArchiveUnprocessableEntity with default headers values
func NewExportArchiveUnprocessableEntity() *ExportArchiveUnprocessableEntity {
	return &ExportArchiveUnprocessableEntity{}
}

/*ExportArchiveUnprocessableEntity handles this case with default header values.

Format error in supplied filter or archive
*/
type ExportArchiveUnprocessableEntity struct {
}

func (o *ExportArchiveUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /archive][%d] exportArchiveUnprocessableEntity ", 422)
}

func (o *ExportArchiveUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExportArchiveLocked creates a ExportArchiveLocked with default headers values
func NewExportArchiveLocked() *ExportArchiveLocked {
	return &ExportArchiveLocked{}
}

/*ExportArchiveLocked handles this case with default header values.

Device or resource is locked
*/
type ExportArchiveLocked struct {
}

func (o *ExportArchiveLocked) Error() string {
	return fmt.Sprintf("[GET /archive][%d] exportArchiveLocked ", 423)
}

func (o *ExportArchiveLocked) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExportArchiveInternalServerError creates a ExportArchiveInternalServerError with default headers values
func NewExportArchiveInternalServerError() *ExportArchiveInternalServerError {
	return &ExportArchiveInternalServerError{}
}

/*ExportArchiveInternalServerError handles this case with default header values.

failed to export tar archive from target
*/
type ExportArchiveInternalServerError struct {
}

func (o *ExportArchiveInternalServerError) Error() string {
	return fmt.Sprintf("[GET /archive][%d] exportArchiveInternalServerError ", 500)
}

func (o *ExportArchiveInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExportArchiveDefault creates a ExportArchiveDefault with default headers values
func NewExportArchiveDefault(code int) *ExportArchiveDefault {
	return &ExportArchiveDefault{
		_statusCode: code,
	}
}

/*ExportArchiveDefault handles this case with default header values.

error
*/
type ExportArchiveDefault struct {
	_statusCode int
}

// Code gets the status code for the export archive default response
func (o *ExportArchiveDefault) Code() int {
	return o._statusCode
}

func (o *ExportArchiveDefault) Error() string {
	return fmt.Sprintf("[GET /archive][%d] ExportArchive default ", o._statusCode)
}

func (o *ExportArchiveDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
