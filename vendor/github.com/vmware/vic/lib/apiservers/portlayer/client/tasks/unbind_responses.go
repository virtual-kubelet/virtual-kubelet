package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// UnbindReader is a Reader for the Unbind structure.
type UnbindReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UnbindReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUnbindOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewUnbindNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUnbindInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUnbindOK creates a UnbindOK with default headers values
func NewUnbindOK() *UnbindOK {
	return &UnbindOK{}
}

/*UnbindOK handles this case with default header values.

OK
*/
type UnbindOK struct {
	Payload *models.TaskUnbindResponse
}

func (o *UnbindOK) Error() string {
	return fmt.Sprintf("[DELETE /tasks/binding][%d] unbindOK  %+v", 200, o.Payload)
}

func (o *UnbindOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskUnbindResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnbindNotFound creates a UnbindNotFound with default headers values
func NewUnbindNotFound() *UnbindNotFound {
	return &UnbindNotFound{}
}

/*UnbindNotFound handles this case with default header values.

No such task
*/
type UnbindNotFound struct {
	Payload *models.Error
}

func (o *UnbindNotFound) Error() string {
	return fmt.Sprintf("[DELETE /tasks/binding][%d] unbindNotFound  %+v", 404, o.Payload)
}

func (o *UnbindNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnbindInternalServerError creates a UnbindInternalServerError with default headers values
func NewUnbindInternalServerError() *UnbindInternalServerError {
	return &UnbindInternalServerError{}
}

/*UnbindInternalServerError handles this case with default header values.

Deactivating task failed
*/
type UnbindInternalServerError struct {
	Payload *models.Error
}

func (o *UnbindInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /tasks/binding][%d] unbindInternalServerError  %+v", 500, o.Payload)
}

func (o *UnbindInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
