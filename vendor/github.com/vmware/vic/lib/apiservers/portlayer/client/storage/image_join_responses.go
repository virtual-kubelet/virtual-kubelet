package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// ImageJoinReader is a Reader for the ImageJoin structure.
type ImageJoinReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImageJoinReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewImageJoinOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewImageJoinNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewImageJoinInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewImageJoinDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewImageJoinOK creates a ImageJoinOK with default headers values
func NewImageJoinOK() *ImageJoinOK {
	return &ImageJoinOK{}
}

/*ImageJoinOK handles this case with default header values.

OK
*/
type ImageJoinOK struct {
	Payload *models.ImageJoinResponse
}

func (o *ImageJoinOK) Error() string {
	return fmt.Sprintf("[POST /storage/{store_name}/info/{id}][%d] imageJoinOK  %+v", 200, o.Payload)
}

func (o *ImageJoinOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ImageJoinResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageJoinNotFound creates a ImageJoinNotFound with default headers values
func NewImageJoinNotFound() *ImageJoinNotFound {
	return &ImageJoinNotFound{}
}

/*ImageJoinNotFound handles this case with default header values.

Not found
*/
type ImageJoinNotFound struct {
	Payload *models.Error
}

func (o *ImageJoinNotFound) Error() string {
	return fmt.Sprintf("[POST /storage/{store_name}/info/{id}][%d] imageJoinNotFound  %+v", 404, o.Payload)
}

func (o *ImageJoinNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageJoinInternalServerError creates a ImageJoinInternalServerError with default headers values
func NewImageJoinInternalServerError() *ImageJoinInternalServerError {
	return &ImageJoinInternalServerError{}
}

/*ImageJoinInternalServerError handles this case with default header values.

ServerError
*/
type ImageJoinInternalServerError struct {
	Payload *models.Error
}

func (o *ImageJoinInternalServerError) Error() string {
	return fmt.Sprintf("[POST /storage/{store_name}/info/{id}][%d] imageJoinInternalServerError  %+v", 500, o.Payload)
}

func (o *ImageJoinInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageJoinDefault creates a ImageJoinDefault with default headers values
func NewImageJoinDefault(code int) *ImageJoinDefault {
	return &ImageJoinDefault{
		_statusCode: code,
	}
}

/*ImageJoinDefault handles this case with default header values.

error
*/
type ImageJoinDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the image join default response
func (o *ImageJoinDefault) Code() int {
	return o._statusCode
}

func (o *ImageJoinDefault) Error() string {
	return fmt.Sprintf("[POST /storage/{store_name}/info/{id}][%d] ImageJoin default  %+v", o._statusCode, o.Payload)
}

func (o *ImageJoinDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
