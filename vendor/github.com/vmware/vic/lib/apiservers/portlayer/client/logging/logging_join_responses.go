package logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// LoggingJoinReader is a Reader for the LoggingJoin structure.
type LoggingJoinReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoggingJoinReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewLoggingJoinOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewLoggingJoinNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewLoggingJoinInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewLoggingJoinOK creates a LoggingJoinOK with default headers values
func NewLoggingJoinOK() *LoggingJoinOK {
	return &LoggingJoinOK{}
}

/*LoggingJoinOK handles this case with default header values.

OK
*/
type LoggingJoinOK struct {
	Payload *models.LoggingJoinResponse
}

func (o *LoggingJoinOK) Error() string {
	return fmt.Sprintf("[POST /logging][%d] loggingJoinOK  %+v", 200, o.Payload)
}

func (o *LoggingJoinOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LoggingJoinResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoggingJoinNotFound creates a LoggingJoinNotFound with default headers values
func NewLoggingJoinNotFound() *LoggingJoinNotFound {
	return &LoggingJoinNotFound{}
}

/*LoggingJoinNotFound handles this case with default header values.

VirtualDevice not found
*/
type LoggingJoinNotFound struct {
	Payload *models.Error
}

func (o *LoggingJoinNotFound) Error() string {
	return fmt.Sprintf("[POST /logging][%d] loggingJoinNotFound  %+v", 404, o.Payload)
}

func (o *LoggingJoinNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoggingJoinInternalServerError creates a LoggingJoinInternalServerError with default headers values
func NewLoggingJoinInternalServerError() *LoggingJoinInternalServerError {
	return &LoggingJoinInternalServerError{}
}

/*LoggingJoinInternalServerError handles this case with default header values.

Adding a VirtualDevice failed
*/
type LoggingJoinInternalServerError struct {
	Payload *models.Error
}

func (o *LoggingJoinInternalServerError) Error() string {
	return fmt.Sprintf("[POST /logging][%d] loggingJoinInternalServerError  %+v", 500, o.Payload)
}

func (o *LoggingJoinInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
