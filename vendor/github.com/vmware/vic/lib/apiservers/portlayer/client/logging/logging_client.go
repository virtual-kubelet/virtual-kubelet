package logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new logging API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for logging API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
LoggingBind enables bind activate the virtual device

Enable/bind/activate the VirtualDevice
*/
func (a *Client) LoggingBind(params *LoggingBindParams) (*LoggingBindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoggingBindParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoggingBind",
		Method:             "POST",
		PathPattern:        "/logging/binding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoggingBindReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoggingBindOK), nil

}

/*
LoggingJoin adds logging capability

Adds logging capabilities to given handle
*/
func (a *Client) LoggingJoin(params *LoggingJoinParams) (*LoggingJoinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoggingJoinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoggingJoin",
		Method:             "POST",
		PathPattern:        "/logging",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoggingJoinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoggingJoinOK), nil

}

/*
LoggingUnbind disables unbind deactivate the virtual device

Disable/unbind/deactivate the VirtualDevice
*/
func (a *Client) LoggingUnbind(params *LoggingUnbindParams) (*LoggingUnbindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoggingUnbindParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LoggingUnbind",
		Method:             "DELETE",
		PathPattern:        "/logging/binding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoggingUnbindReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoggingUnbindOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
