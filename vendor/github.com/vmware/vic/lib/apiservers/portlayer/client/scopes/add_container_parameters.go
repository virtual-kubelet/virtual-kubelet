package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// NewAddContainerParams creates a new AddContainerParams object
// with the default values initialized.
func NewAddContainerParams() *AddContainerParams {
	var ()
	return &AddContainerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddContainerParamsWithTimeout creates a new AddContainerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddContainerParamsWithTimeout(timeout time.Duration) *AddContainerParams {
	var ()
	return &AddContainerParams{

		timeout: timeout,
	}
}

// NewAddContainerParamsWithContext creates a new AddContainerParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddContainerParamsWithContext(ctx context.Context) *AddContainerParams {
	var ()
	return &AddContainerParams{

		Context: ctx,
	}
}

// NewAddContainerParamsWithHTTPClient creates a new AddContainerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddContainerParamsWithHTTPClient(client *http.Client) *AddContainerParams {
	var ()
	return &AddContainerParams{
		HTTPClient: client,
	}
}

/*AddContainerParams contains all the parameters to send to the API endpoint
for the add container operation typically these are written to a http.Request
*/
type AddContainerParams struct {

	/*Config*/
	Config *models.ScopesAddContainerConfig
	/*Scope*/
	Scope string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add container params
func (o *AddContainerParams) WithTimeout(timeout time.Duration) *AddContainerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add container params
func (o *AddContainerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add container params
func (o *AddContainerParams) WithContext(ctx context.Context) *AddContainerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add container params
func (o *AddContainerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add container params
func (o *AddContainerParams) WithHTTPClient(client *http.Client) *AddContainerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add container params
func (o *AddContainerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConfig adds the config to the add container params
func (o *AddContainerParams) WithConfig(config *models.ScopesAddContainerConfig) *AddContainerParams {
	o.SetConfig(config)
	return o
}

// SetConfig adds the config to the add container params
func (o *AddContainerParams) SetConfig(config *models.ScopesAddContainerConfig) {
	o.Config = config
}

// WithScope adds the scope to the add container params
func (o *AddContainerParams) WithScope(scope string) *AddContainerParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the add container params
func (o *AddContainerParams) SetScope(scope string) {
	o.Scope = scope
}

// WriteToRequest writes these params to a swagger request
func (o *AddContainerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Config == nil {
		o.Config = new(models.ScopesAddContainerConfig)
	}

	if err := r.SetBodyParam(o.Config); err != nil {
		return err
	}

	// path param scope
	if err := r.SetPathParam("scope", o.Scope); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
