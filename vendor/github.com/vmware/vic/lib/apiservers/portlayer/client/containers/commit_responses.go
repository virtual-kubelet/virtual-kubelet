package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// CommitReader is a Reader for the Commit structure.
type CommitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCommitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewCommitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCommitConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCommitDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCommitOK creates a CommitOK with default headers values
func NewCommitOK() *CommitOK {
	return &CommitOK{}
}

/*CommitOK handles this case with default header values.

OK
*/
type CommitOK struct {
}

func (o *CommitOK) Error() string {
	return fmt.Sprintf("[PUT /containers/{handle}][%d] commitOK ", 200)
}

func (o *CommitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCommitNotFound creates a CommitNotFound with default headers values
func NewCommitNotFound() *CommitNotFound {
	return &CommitNotFound{}
}

/*CommitNotFound handles this case with default header values.

not found
*/
type CommitNotFound struct {
	Payload *models.Error
}

func (o *CommitNotFound) Error() string {
	return fmt.Sprintf("[PUT /containers/{handle}][%d] commitNotFound  %+v", 404, o.Payload)
}

func (o *CommitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitConflict creates a CommitConflict with default headers values
func NewCommitConflict() *CommitConflict {
	return &CommitConflict{}
}

/*CommitConflict handles this case with default header values.

conflict
*/
type CommitConflict struct {
	Payload *models.Error
}

func (o *CommitConflict) Error() string {
	return fmt.Sprintf("[PUT /containers/{handle}][%d] commitConflict  %+v", 409, o.Payload)
}

func (o *CommitConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitDefault creates a CommitDefault with default headers values
func NewCommitDefault(code int) *CommitDefault {
	return &CommitDefault{
		_statusCode: code,
	}
}

/*CommitDefault handles this case with default header values.

Error
*/
type CommitDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the commit default response
func (o *CommitDefault) Code() int {
	return o._statusCode
}

func (o *CommitDefault) Error() string {
	return fmt.Sprintf("[PUT /containers/{handle}][%d] Commit default  %+v", o._statusCode, o.Payload)
}

func (o *CommitDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
