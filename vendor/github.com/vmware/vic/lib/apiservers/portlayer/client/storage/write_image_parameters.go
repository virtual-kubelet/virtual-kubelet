package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewWriteImageParams creates a new WriteImageParams object
// with the default values initialized.
func NewWriteImageParams() *WriteImageParams {
	var ()
	return &WriteImageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewWriteImageParamsWithTimeout creates a new WriteImageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewWriteImageParamsWithTimeout(timeout time.Duration) *WriteImageParams {
	var ()
	return &WriteImageParams{

		timeout: timeout,
	}
}

// NewWriteImageParamsWithContext creates a new WriteImageParams object
// with the default values initialized, and the ability to set a context for a request
func NewWriteImageParamsWithContext(ctx context.Context) *WriteImageParams {
	var ()
	return &WriteImageParams{

		Context: ctx,
	}
}

// NewWriteImageParamsWithHTTPClient creates a new WriteImageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewWriteImageParamsWithHTTPClient(client *http.Client) *WriteImageParams {
	var ()
	return &WriteImageParams{
		HTTPClient: client,
	}
}

/*WriteImageParams contains all the parameters to send to the API endpoint
for the write image operation typically these are written to a http.Request
*/
type WriteImageParams struct {

	/*OpID*/
	OpID *string
	/*ImageFile*/
	ImageFile io.ReadCloser
	/*ImageID*/
	ImageID string
	/*Metadatakey*/
	Metadatakey *string
	/*Metadataval*/
	Metadataval *string
	/*ParentID*/
	ParentID string
	/*StoreName*/
	StoreName string
	/*Sum*/
	Sum string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the write image params
func (o *WriteImageParams) WithTimeout(timeout time.Duration) *WriteImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the write image params
func (o *WriteImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the write image params
func (o *WriteImageParams) WithContext(ctx context.Context) *WriteImageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the write image params
func (o *WriteImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the write image params
func (o *WriteImageParams) WithHTTPClient(client *http.Client) *WriteImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the write image params
func (o *WriteImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOpID adds the opID to the write image params
func (o *WriteImageParams) WithOpID(opID *string) *WriteImageParams {
	o.SetOpID(opID)
	return o
}

// SetOpID adds the opId to the write image params
func (o *WriteImageParams) SetOpID(opID *string) {
	o.OpID = opID
}

// WithImageFile adds the imageFile to the write image params
func (o *WriteImageParams) WithImageFile(imageFile io.ReadCloser) *WriteImageParams {
	o.SetImageFile(imageFile)
	return o
}

// SetImageFile adds the imageFile to the write image params
func (o *WriteImageParams) SetImageFile(imageFile io.ReadCloser) {
	o.ImageFile = imageFile
}

// WithImageID adds the imageID to the write image params
func (o *WriteImageParams) WithImageID(imageID string) *WriteImageParams {
	o.SetImageID(imageID)
	return o
}

// SetImageID adds the imageId to the write image params
func (o *WriteImageParams) SetImageID(imageID string) {
	o.ImageID = imageID
}

// WithMetadatakey adds the metadatakey to the write image params
func (o *WriteImageParams) WithMetadatakey(metadatakey *string) *WriteImageParams {
	o.SetMetadatakey(metadatakey)
	return o
}

// SetMetadatakey adds the metadatakey to the write image params
func (o *WriteImageParams) SetMetadatakey(metadatakey *string) {
	o.Metadatakey = metadatakey
}

// WithMetadataval adds the metadataval to the write image params
func (o *WriteImageParams) WithMetadataval(metadataval *string) *WriteImageParams {
	o.SetMetadataval(metadataval)
	return o
}

// SetMetadataval adds the metadataval to the write image params
func (o *WriteImageParams) SetMetadataval(metadataval *string) {
	o.Metadataval = metadataval
}

// WithParentID adds the parentID to the write image params
func (o *WriteImageParams) WithParentID(parentID string) *WriteImageParams {
	o.SetParentID(parentID)
	return o
}

// SetParentID adds the parentId to the write image params
func (o *WriteImageParams) SetParentID(parentID string) {
	o.ParentID = parentID
}

// WithStoreName adds the storeName to the write image params
func (o *WriteImageParams) WithStoreName(storeName string) *WriteImageParams {
	o.SetStoreName(storeName)
	return o
}

// SetStoreName adds the storeName to the write image params
func (o *WriteImageParams) SetStoreName(storeName string) {
	o.StoreName = storeName
}

// WithSum adds the sum to the write image params
func (o *WriteImageParams) WithSum(sum string) *WriteImageParams {
	o.SetSum(sum)
	return o
}

// SetSum adds the sum to the write image params
func (o *WriteImageParams) SetSum(sum string) {
	o.Sum = sum
}

// WriteToRequest writes these params to a swagger request
func (o *WriteImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.OpID != nil {

		// header param Op-ID
		if err := r.SetHeaderParam("Op-ID", *o.OpID); err != nil {
			return err
		}

	}

	if err := r.SetBodyParam(o.ImageFile); err != nil {
		return err
	}

	// query param image_id
	qrImageID := o.ImageID
	qImageID := qrImageID
	if qImageID != "" {
		if err := r.SetQueryParam("image_id", qImageID); err != nil {
			return err
		}
	}

	if o.Metadatakey != nil {

		// query param metadatakey
		var qrMetadatakey string
		if o.Metadatakey != nil {
			qrMetadatakey = *o.Metadatakey
		}
		qMetadatakey := qrMetadatakey
		if qMetadatakey != "" {
			if err := r.SetQueryParam("metadatakey", qMetadatakey); err != nil {
				return err
			}
		}

	}

	if o.Metadataval != nil {

		// query param metadataval
		var qrMetadataval string
		if o.Metadataval != nil {
			qrMetadataval = *o.Metadataval
		}
		qMetadataval := qrMetadataval
		if qMetadataval != "" {
			if err := r.SetQueryParam("metadataval", qMetadataval); err != nil {
				return err
			}
		}

	}

	// query param parent_id
	qrParentID := o.ParentID
	qParentID := qrParentID
	if qParentID != "" {
		if err := r.SetQueryParam("parent_id", qParentID); err != nil {
			return err
		}
	}

	// path param store_name
	if err := r.SetPathParam("store_name", o.StoreName); err != nil {
		return err
	}

	// query param sum
	qrSum := o.Sum
	qSum := qrSum
	if qSum != "" {
		if err := r.SetQueryParam("sum", qSum); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
