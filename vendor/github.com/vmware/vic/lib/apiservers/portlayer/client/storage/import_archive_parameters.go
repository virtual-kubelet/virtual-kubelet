package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewImportArchiveParams creates a new ImportArchiveParams object
// with the default values initialized.
func NewImportArchiveParams() *ImportArchiveParams {
	var ()
	return &ImportArchiveParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewImportArchiveParamsWithTimeout creates a new ImportArchiveParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewImportArchiveParamsWithTimeout(timeout time.Duration) *ImportArchiveParams {
	var ()
	return &ImportArchiveParams{

		timeout: timeout,
	}
}

// NewImportArchiveParamsWithContext creates a new ImportArchiveParams object
// with the default values initialized, and the ability to set a context for a request
func NewImportArchiveParamsWithContext(ctx context.Context) *ImportArchiveParams {
	var ()
	return &ImportArchiveParams{

		Context: ctx,
	}
}

// NewImportArchiveParamsWithHTTPClient creates a new ImportArchiveParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewImportArchiveParamsWithHTTPClient(client *http.Client) *ImportArchiveParams {
	var ()
	return &ImportArchiveParams{
		HTTPClient: client,
	}
}

/*ImportArchiveParams contains all the parameters to send to the API endpoint
for the import archive operation typically these are written to a http.Request
*/
type ImportArchiveParams struct {

	/*Archive*/
	Archive io.ReadCloser
	/*OpID*/
	OpID *string
	/*DeviceID*/
	DeviceID string
	/*FilterSpec*/
	FilterSpec *string
	/*Store*/
	Store string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the import archive params
func (o *ImportArchiveParams) WithTimeout(timeout time.Duration) *ImportArchiveParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import archive params
func (o *ImportArchiveParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import archive params
func (o *ImportArchiveParams) WithContext(ctx context.Context) *ImportArchiveParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import archive params
func (o *ImportArchiveParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import archive params
func (o *ImportArchiveParams) WithHTTPClient(client *http.Client) *ImportArchiveParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import archive params
func (o *ImportArchiveParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArchive adds the archive to the import archive params
func (o *ImportArchiveParams) WithArchive(archive io.ReadCloser) *ImportArchiveParams {
	o.SetArchive(archive)
	return o
}

// SetArchive adds the archive to the import archive params
func (o *ImportArchiveParams) SetArchive(archive io.ReadCloser) {
	o.Archive = archive
}

// WithOpID adds the opID to the import archive params
func (o *ImportArchiveParams) WithOpID(opID *string) *ImportArchiveParams {
	o.SetOpID(opID)
	return o
}

// SetOpID adds the opId to the import archive params
func (o *ImportArchiveParams) SetOpID(opID *string) {
	o.OpID = opID
}

// WithDeviceID adds the deviceID to the import archive params
func (o *ImportArchiveParams) WithDeviceID(deviceID string) *ImportArchiveParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the import archive params
func (o *ImportArchiveParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WithFilterSpec adds the filterSpec to the import archive params
func (o *ImportArchiveParams) WithFilterSpec(filterSpec *string) *ImportArchiveParams {
	o.SetFilterSpec(filterSpec)
	return o
}

// SetFilterSpec adds the filterSpec to the import archive params
func (o *ImportArchiveParams) SetFilterSpec(filterSpec *string) {
	o.FilterSpec = filterSpec
}

// WithStore adds the store to the import archive params
func (o *ImportArchiveParams) WithStore(store string) *ImportArchiveParams {
	o.SetStore(store)
	return o
}

// SetStore adds the store to the import archive params
func (o *ImportArchiveParams) SetStore(store string) {
	o.Store = store
}

// WriteToRequest writes these params to a swagger request
func (o *ImportArchiveParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if err := r.SetBodyParam(o.Archive); err != nil {
		return err
	}

	if o.OpID != nil {

		// header param Op-ID
		if err := r.SetHeaderParam("Op-ID", *o.OpID); err != nil {
			return err
		}

	}

	// query param deviceID
	qrDeviceID := o.DeviceID
	qDeviceID := qrDeviceID
	if qDeviceID != "" {
		if err := r.SetQueryParam("deviceID", qDeviceID); err != nil {
			return err
		}
	}

	if o.FilterSpec != nil {

		// query param filterSpec
		var qrFilterSpec string
		if o.FilterSpec != nil {
			qrFilterSpec = *o.FilterSpec
		}
		qFilterSpec := qrFilterSpec
		if qFilterSpec != "" {
			if err := r.SetQueryParam("filterSpec", qFilterSpec); err != nil {
				return err
			}
		}

	}

	// query param store
	qrStore := o.Store
	qStore := qrStore
	if qStore != "" {
		if err := r.SetQueryParam("store", qStore); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
