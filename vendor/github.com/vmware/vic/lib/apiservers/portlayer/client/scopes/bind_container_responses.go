package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// BindContainerReader is a Reader for the BindContainer structure.
type BindContainerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BindContainerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewBindContainerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewBindContainerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewBindContainerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewBindContainerOK creates a BindContainerOK with default headers values
func NewBindContainerOK() *BindContainerOK {
	return &BindContainerOK{}
}

/*BindContainerOK handles this case with default header values.

OK
*/
type BindContainerOK struct {
	Payload *models.BindContainerResponse
}

func (o *BindContainerOK) Error() string {
	return fmt.Sprintf("[POST /scopes/containers/{handle}/binding][%d] bindContainerOK  %+v", 200, o.Payload)
}

func (o *BindContainerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BindContainerResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindContainerNotFound creates a BindContainerNotFound with default headers values
func NewBindContainerNotFound() *BindContainerNotFound {
	return &BindContainerNotFound{}
}

/*BindContainerNotFound handles this case with default header values.

Not found
*/
type BindContainerNotFound struct {
	Payload *models.Error
}

func (o *BindContainerNotFound) Error() string {
	return fmt.Sprintf("[POST /scopes/containers/{handle}/binding][%d] bindContainerNotFound  %+v", 404, o.Payload)
}

func (o *BindContainerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindContainerInternalServerError creates a BindContainerInternalServerError with default headers values
func NewBindContainerInternalServerError() *BindContainerInternalServerError {
	return &BindContainerInternalServerError{}
}

/*BindContainerInternalServerError handles this case with default header values.

error
*/
type BindContainerInternalServerError struct {
	Payload *models.Error
}

func (o *BindContainerInternalServerError) Error() string {
	return fmt.Sprintf("[POST /scopes/containers/{handle}/binding][%d] bindContainerInternalServerError  %+v", 500, o.Payload)
}

func (o *BindContainerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
