package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// GetVolumeReader is a Reader for the GetVolume structure.
type GetVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetVolumeOK creates a GetVolumeOK with default headers values
func NewGetVolumeOK() *GetVolumeOK {
	return &GetVolumeOK{}
}

/*GetVolumeOK handles this case with default header values.

OK
*/
type GetVolumeOK struct {
	Payload *models.VolumeResponse
}

func (o *GetVolumeOK) Error() string {
	return fmt.Sprintf("[GET /storage/volumes/{name}][%d] getVolumeOK  %+v", 200, o.Payload)
}

func (o *GetVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VolumeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumeNotFound creates a GetVolumeNotFound with default headers values
func NewGetVolumeNotFound() *GetVolumeNotFound {
	return &GetVolumeNotFound{}
}

/*GetVolumeNotFound handles this case with default header values.

Volume not found
*/
type GetVolumeNotFound struct {
	Payload *models.Error
}

func (o *GetVolumeNotFound) Error() string {
	return fmt.Sprintf("[GET /storage/volumes/{name}][%d] getVolumeNotFound  %+v", 404, o.Payload)
}

func (o *GetVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
