package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// NewVolumeJoinParams creates a new VolumeJoinParams object
// with the default values initialized.
func NewVolumeJoinParams() *VolumeJoinParams {
	var ()
	return &VolumeJoinParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewVolumeJoinParamsWithTimeout creates a new VolumeJoinParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewVolumeJoinParamsWithTimeout(timeout time.Duration) *VolumeJoinParams {
	var ()
	return &VolumeJoinParams{

		timeout: timeout,
	}
}

// NewVolumeJoinParamsWithContext creates a new VolumeJoinParams object
// with the default values initialized, and the ability to set a context for a request
func NewVolumeJoinParamsWithContext(ctx context.Context) *VolumeJoinParams {
	var ()
	return &VolumeJoinParams{

		Context: ctx,
	}
}

// NewVolumeJoinParamsWithHTTPClient creates a new VolumeJoinParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewVolumeJoinParamsWithHTTPClient(client *http.Client) *VolumeJoinParams {
	var ()
	return &VolumeJoinParams{
		HTTPClient: client,
	}
}

/*VolumeJoinParams contains all the parameters to send to the API endpoint
for the volume join operation typically these are written to a http.Request
*/
type VolumeJoinParams struct {

	/*JoinArgs*/
	JoinArgs *models.VolumeJoinConfig
	/*Name*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the volume join params
func (o *VolumeJoinParams) WithTimeout(timeout time.Duration) *VolumeJoinParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the volume join params
func (o *VolumeJoinParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the volume join params
func (o *VolumeJoinParams) WithContext(ctx context.Context) *VolumeJoinParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the volume join params
func (o *VolumeJoinParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the volume join params
func (o *VolumeJoinParams) WithHTTPClient(client *http.Client) *VolumeJoinParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the volume join params
func (o *VolumeJoinParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithJoinArgs adds the joinArgs to the volume join params
func (o *VolumeJoinParams) WithJoinArgs(joinArgs *models.VolumeJoinConfig) *VolumeJoinParams {
	o.SetJoinArgs(joinArgs)
	return o
}

// SetJoinArgs adds the joinArgs to the volume join params
func (o *VolumeJoinParams) SetJoinArgs(joinArgs *models.VolumeJoinConfig) {
	o.JoinArgs = joinArgs
}

// WithName adds the name to the volume join params
func (o *VolumeJoinParams) WithName(name string) *VolumeJoinParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the volume join params
func (o *VolumeJoinParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *VolumeJoinParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.JoinArgs == nil {
		o.JoinArgs = new(models.VolumeJoinConfig)
	}

	if err := r.SetBodyParam(o.JoinArgs); err != nil {
		return err
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
