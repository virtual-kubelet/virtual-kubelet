package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// GetStateReader is a Reader for the GetState structure.
type GetStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetStateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetStateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetStateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetStateOK creates a GetStateOK with default headers values
func NewGetStateOK() *GetStateOK {
	return &GetStateOK{}
}

/*GetStateOK handles this case with default header values.

OK
*/
type GetStateOK struct {
	Payload *models.ContainerGetStateResponse
}

func (o *GetStateOK) Error() string {
	return fmt.Sprintf("[GET /containers/{handle}/state][%d] getStateOK  %+v", 200, o.Payload)
}

func (o *GetStateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ContainerGetStateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStateNotFound creates a GetStateNotFound with default headers values
func NewGetStateNotFound() *GetStateNotFound {
	return &GetStateNotFound{}
}

/*GetStateNotFound handles this case with default header values.

not found
*/
type GetStateNotFound struct {
	Payload *models.Error
}

func (o *GetStateNotFound) Error() string {
	return fmt.Sprintf("[GET /containers/{handle}/state][%d] getStateNotFound  %+v", 404, o.Payload)
}

func (o *GetStateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStateDefault creates a GetStateDefault with default headers values
func NewGetStateDefault(code int) *GetStateDefault {
	return &GetStateDefault{
		_statusCode: code,
	}
}

/*GetStateDefault handles this case with default header values.

Error
*/
type GetStateDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get state default response
func (o *GetStateDefault) Code() int {
	return o._statusCode
}

func (o *GetStateDefault) Error() string {
	return fmt.Sprintf("[GET /containers/{handle}/state][%d] GetState default  %+v", o._statusCode, o.Payload)
}

func (o *GetStateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
