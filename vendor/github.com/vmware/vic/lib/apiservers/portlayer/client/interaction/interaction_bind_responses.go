package interaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// InteractionBindReader is a Reader for the InteractionBind structure.
type InteractionBindReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InteractionBindReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewInteractionBindOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewInteractionBindNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewInteractionBindInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewInteractionBindOK creates a InteractionBindOK with default headers values
func NewInteractionBindOK() *InteractionBindOK {
	return &InteractionBindOK{}
}

/*InteractionBindOK handles this case with default header values.

OK
*/
type InteractionBindOK struct {
	Payload *models.InteractionBindResponse
}

func (o *InteractionBindOK) Error() string {
	return fmt.Sprintf("[POST /interaction/binding][%d] interactionBindOK  %+v", 200, o.Payload)
}

func (o *InteractionBindOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InteractionBindResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInteractionBindNotFound creates a InteractionBindNotFound with default headers values
func NewInteractionBindNotFound() *InteractionBindNotFound {
	return &InteractionBindNotFound{}
}

/*InteractionBindNotFound handles this case with default header values.

VirtualDevice not found
*/
type InteractionBindNotFound struct {
	Payload *models.Error
}

func (o *InteractionBindNotFound) Error() string {
	return fmt.Sprintf("[POST /interaction/binding][%d] interactionBindNotFound  %+v", 404, o.Payload)
}

func (o *InteractionBindNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInteractionBindInternalServerError creates a InteractionBindInternalServerError with default headers values
func NewInteractionBindInternalServerError() *InteractionBindInternalServerError {
	return &InteractionBindInternalServerError{}
}

/*InteractionBindInternalServerError handles this case with default header values.

Connecting VirtualDevice failed
*/
type InteractionBindInternalServerError struct {
	Payload *models.Error
}

func (o *InteractionBindInternalServerError) Error() string {
	return fmt.Sprintf("[POST /interaction/binding][%d] interactionBindInternalServerError  %+v", 500, o.Payload)
}

func (o *InteractionBindInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
