package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// InspectReader is a Reader for the Inspect structure.
type InspectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InspectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewInspectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewInspectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewInspectConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewInspectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewInspectOK creates a InspectOK with default headers values
func NewInspectOK() *InspectOK {
	return &InspectOK{}
}

/*InspectOK handles this case with default header values.

OK
*/
type InspectOK struct {
	Payload *models.TaskInspectResponse
}

func (o *InspectOK) Error() string {
	return fmt.Sprintf("[GET /tasks][%d] inspectOK  %+v", 200, o.Payload)
}

func (o *InspectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskInspectResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInspectNotFound creates a InspectNotFound with default headers values
func NewInspectNotFound() *InspectNotFound {
	return &InspectNotFound{}
}

/*InspectNotFound handles this case with default header values.

not found
*/
type InspectNotFound struct {
	Payload *models.Error
}

func (o *InspectNotFound) Error() string {
	return fmt.Sprintf("[GET /tasks][%d] inspectNotFound  %+v", 404, o.Payload)
}

func (o *InspectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInspectConflict creates a InspectConflict with default headers values
func NewInspectConflict() *InspectConflict {
	return &InspectConflict{}
}

/*InspectConflict handles this case with default header values.

Task failed due to power state change
*/
type InspectConflict struct {
	Payload *models.Error
}

func (o *InspectConflict) Error() string {
	return fmt.Sprintf("[GET /tasks][%d] inspectConflict  %+v", 409, o.Payload)
}

func (o *InspectConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInspectInternalServerError creates a InspectInternalServerError with default headers values
func NewInspectInternalServerError() *InspectInternalServerError {
	return &InspectInternalServerError{}
}

/*InspectInternalServerError handles this case with default header values.

Inspect of task failed
*/
type InspectInternalServerError struct {
	Payload *models.Error
}

func (o *InspectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tasks][%d] inspectInternalServerError  %+v", 500, o.Payload)
}

func (o *InspectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
