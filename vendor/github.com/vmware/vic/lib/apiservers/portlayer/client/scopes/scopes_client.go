package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new scopes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scopes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddContainer Add a container to scopes modifying the container VM's config as necessary
*/
func (a *Client) AddContainer(params *AddContainerParams) (*AddContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddContainer",
		Method:             "POST",
		PathPattern:        "/scopes/{scope}/containers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddContainerOK), nil

}

/*
BindContainer Perform scope initialization for each of the scopes the container belongs to. Network initialization may include, for example, assigning addresses on a scope.
*/
func (a *Client) BindContainer(params *BindContainerParams) (*BindContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBindContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BindContainer",
		Method:             "POST",
		PathPattern:        "/scopes/containers/{handle}/binding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BindContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BindContainerOK), nil

}

/*
CreateScope creates a new scope
*/
func (a *Client) CreateScope(params *CreateScopeParams) (*CreateScopeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScopeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateScope",
		Method:             "POST",
		PathPattern:        "/scopes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateScopeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateScopeCreated), nil

}

/*
DeleteScope delete scope API
*/
func (a *Client) DeleteScope(params *DeleteScopeParams) (*DeleteScopeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScopeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteScope",
		Method:             "DELETE",
		PathPattern:        "/scopes/{idName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteScopeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteScopeOK), nil

}

/*
GetContainerEndpoints Get a list of the endpoints for a container
*/
func (a *Client) GetContainerEndpoints(params *GetContainerEndpointsParams) (*GetContainerEndpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContainerEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContainerEndpoints",
		Method:             "GET",
		PathPattern:        "/scopes/containers/{handleOrId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContainerEndpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContainerEndpointsOK), nil

}

/*
List list API
*/
func (a *Client) List(params *ListParams) (*ListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "List",
		Method:             "GET",
		PathPattern:        "/scopes/{idName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListOK), nil

}

/*
ListAll list all API
*/
func (a *Client) ListAll(params *ListAllParams) (*ListAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAll",
		Method:             "GET",
		PathPattern:        "/scopes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAllOK), nil

}

/*
RemoveContainer Remove a container from a scope
*/
func (a *Client) RemoveContainer(params *RemoveContainerParams) (*RemoveContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveContainer",
		Method:             "DELETE",
		PathPattern:        "/scopes/{scope}/containers/{handle}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveContainerOK), nil

}

/*
UnbindContainer unbind container API
*/
func (a *Client) UnbindContainer(params *UnbindContainerParams) (*UnbindContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnbindContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UnbindContainer",
		Method:             "DELETE",
		PathPattern:        "/scopes/containers/{handle}/binding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnbindContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UnbindContainerOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
