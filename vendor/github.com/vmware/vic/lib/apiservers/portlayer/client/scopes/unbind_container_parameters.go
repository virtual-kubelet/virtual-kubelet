package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUnbindContainerParams creates a new UnbindContainerParams object
// with the default values initialized.
func NewUnbindContainerParams() *UnbindContainerParams {
	var ()
	return &UnbindContainerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUnbindContainerParamsWithTimeout creates a new UnbindContainerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUnbindContainerParamsWithTimeout(timeout time.Duration) *UnbindContainerParams {
	var ()
	return &UnbindContainerParams{

		timeout: timeout,
	}
}

// NewUnbindContainerParamsWithContext creates a new UnbindContainerParams object
// with the default values initialized, and the ability to set a context for a request
func NewUnbindContainerParamsWithContext(ctx context.Context) *UnbindContainerParams {
	var ()
	return &UnbindContainerParams{

		Context: ctx,
	}
}

// NewUnbindContainerParamsWithHTTPClient creates a new UnbindContainerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUnbindContainerParamsWithHTTPClient(client *http.Client) *UnbindContainerParams {
	var ()
	return &UnbindContainerParams{
		HTTPClient: client,
	}
}

/*UnbindContainerParams contains all the parameters to send to the API endpoint
for the unbind container operation typically these are written to a http.Request
*/
type UnbindContainerParams struct {

	/*Handle*/
	Handle string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the unbind container params
func (o *UnbindContainerParams) WithTimeout(timeout time.Duration) *UnbindContainerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the unbind container params
func (o *UnbindContainerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the unbind container params
func (o *UnbindContainerParams) WithContext(ctx context.Context) *UnbindContainerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the unbind container params
func (o *UnbindContainerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the unbind container params
func (o *UnbindContainerParams) WithHTTPClient(client *http.Client) *UnbindContainerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the unbind container params
func (o *UnbindContainerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHandle adds the handle to the unbind container params
func (o *UnbindContainerParams) WithHandle(handle string) *UnbindContainerParams {
	o.SetHandle(handle)
	return o
}

// SetHandle adds the handle to the unbind container params
func (o *UnbindContainerParams) SetHandle(handle string) {
	o.Handle = handle
}

// WriteToRequest writes these params to a swagger request
func (o *UnbindContainerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param handle
	if err := r.SetPathParam("handle", o.Handle); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
