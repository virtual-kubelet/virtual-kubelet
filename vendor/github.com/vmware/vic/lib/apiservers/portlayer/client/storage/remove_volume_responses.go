package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// RemoveVolumeReader is a Reader for the RemoveVolume structure.
type RemoveVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRemoveVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewRemoveVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewRemoveVolumeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewRemoveVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRemoveVolumeOK creates a RemoveVolumeOK with default headers values
func NewRemoveVolumeOK() *RemoveVolumeOK {
	return &RemoveVolumeOK{}
}

/*RemoveVolumeOK handles this case with default header values.

Volume successfully removed
*/
type RemoveVolumeOK struct {
	Payload *models.Error
}

func (o *RemoveVolumeOK) Error() string {
	return fmt.Sprintf("[DELETE /storage/volumes/{name}][%d] removeVolumeOK  %+v", 200, o.Payload)
}

func (o *RemoveVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVolumeNotFound creates a RemoveVolumeNotFound with default headers values
func NewRemoveVolumeNotFound() *RemoveVolumeNotFound {
	return &RemoveVolumeNotFound{}
}

/*RemoveVolumeNotFound handles this case with default header values.

Volume not found
*/
type RemoveVolumeNotFound struct {
	Payload *models.Error
}

func (o *RemoveVolumeNotFound) Error() string {
	return fmt.Sprintf("[DELETE /storage/volumes/{name}][%d] removeVolumeNotFound  %+v", 404, o.Payload)
}

func (o *RemoveVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVolumeConflict creates a RemoveVolumeConflict with default headers values
func NewRemoveVolumeConflict() *RemoveVolumeConflict {
	return &RemoveVolumeConflict{}
}

/*RemoveVolumeConflict handles this case with default header values.

Volume in use
*/
type RemoveVolumeConflict struct {
	Payload *models.Error
}

func (o *RemoveVolumeConflict) Error() string {
	return fmt.Sprintf("[DELETE /storage/volumes/{name}][%d] removeVolumeConflict  %+v", 409, o.Payload)
}

func (o *RemoveVolumeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveVolumeInternalServerError creates a RemoveVolumeInternalServerError with default headers values
func NewRemoveVolumeInternalServerError() *RemoveVolumeInternalServerError {
	return &RemoveVolumeInternalServerError{}
}

/*RemoveVolumeInternalServerError handles this case with default header values.

Server Error
*/
type RemoveVolumeInternalServerError struct {
	Payload *models.Error
}

func (o *RemoveVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /storage/volumes/{name}][%d] removeVolumeInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
