package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// GetImageTarReader is a Reader for the GetImageTar structure.
type GetImageTarReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *GetImageTarReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetImageTarOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetImageTarNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetImageTarDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetImageTarOK creates a GetImageTarOK with default headers values
func NewGetImageTarOK(writer io.Writer) *GetImageTarOK {
	return &GetImageTarOK{
		Payload: writer,
	}
}

/*GetImageTarOK handles this case with default header values.

OK
*/
type GetImageTarOK struct {
	Payload io.Writer
}

func (o *GetImageTarOK) Error() string {
	return fmt.Sprintf("[GET /storage/{store_name}/tar/{id}][%d] getImageTarOK  %+v", 200, o.Payload)
}

func (o *GetImageTarOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImageTarNotFound creates a GetImageTarNotFound with default headers values
func NewGetImageTarNotFound() *GetImageTarNotFound {
	return &GetImageTarNotFound{}
}

/*GetImageTarNotFound handles this case with default header values.

Not found
*/
type GetImageTarNotFound struct {
}

func (o *GetImageTarNotFound) Error() string {
	return fmt.Sprintf("[GET /storage/{store_name}/tar/{id}][%d] getImageTarNotFound ", 404)
}

func (o *GetImageTarNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetImageTarDefault creates a GetImageTarDefault with default headers values
func NewGetImageTarDefault(code int) *GetImageTarDefault {
	return &GetImageTarDefault{
		_statusCode: code,
	}
}

/*GetImageTarDefault handles this case with default header values.

error
*/
type GetImageTarDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get image tar default response
func (o *GetImageTarDefault) Code() int {
	return o._statusCode
}

func (o *GetImageTarDefault) Error() string {
	return fmt.Sprintf("[GET /storage/{store_name}/tar/{id}][%d] GetImageTar default  %+v", o._statusCode, o.Payload)
}

func (o *GetImageTarDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
