package logging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// LoggingUnbindReader is a Reader for the LoggingUnbind structure.
type LoggingUnbindReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoggingUnbindReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewLoggingUnbindOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewLoggingUnbindNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewLoggingUnbindInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewLoggingUnbindOK creates a LoggingUnbindOK with default headers values
func NewLoggingUnbindOK() *LoggingUnbindOK {
	return &LoggingUnbindOK{}
}

/*LoggingUnbindOK handles this case with default header values.

OK
*/
type LoggingUnbindOK struct {
	Payload *models.LoggingUnbindResponse
}

func (o *LoggingUnbindOK) Error() string {
	return fmt.Sprintf("[DELETE /logging/binding][%d] loggingUnbindOK  %+v", 200, o.Payload)
}

func (o *LoggingUnbindOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LoggingUnbindResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoggingUnbindNotFound creates a LoggingUnbindNotFound with default headers values
func NewLoggingUnbindNotFound() *LoggingUnbindNotFound {
	return &LoggingUnbindNotFound{}
}

/*LoggingUnbindNotFound handles this case with default header values.

VirtualDevice not found
*/
type LoggingUnbindNotFound struct {
	Payload *models.Error
}

func (o *LoggingUnbindNotFound) Error() string {
	return fmt.Sprintf("[DELETE /logging/binding][%d] loggingUnbindNotFound  %+v", 404, o.Payload)
}

func (o *LoggingUnbindNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoggingUnbindInternalServerError creates a LoggingUnbindInternalServerError with default headers values
func NewLoggingUnbindInternalServerError() *LoggingUnbindInternalServerError {
	return &LoggingUnbindInternalServerError{}
}

/*LoggingUnbindInternalServerError handles this case with default header values.

Disconnecting VirtualDevice failed
*/
type LoggingUnbindInternalServerError struct {
	Payload *models.Error
}

func (o *LoggingUnbindInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /logging/binding][%d] loggingUnbindInternalServerError  %+v", 500, o.Payload)
}

func (o *LoggingUnbindInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
