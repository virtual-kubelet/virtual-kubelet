package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// BindReader is a Reader for the Bind structure.
type BindReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BindReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewBindOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewBindNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewBindInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewBindOK creates a BindOK with default headers values
func NewBindOK() *BindOK {
	return &BindOK{}
}

/*BindOK handles this case with default header values.

OK
*/
type BindOK struct {
	Payload *models.TaskBindResponse
}

func (o *BindOK) Error() string {
	return fmt.Sprintf("[POST /tasks/binding][%d] bindOK  %+v", 200, o.Payload)
}

func (o *BindOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskBindResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindNotFound creates a BindNotFound with default headers values
func NewBindNotFound() *BindNotFound {
	return &BindNotFound{}
}

/*BindNotFound handles this case with default header values.

No such task
*/
type BindNotFound struct {
	Payload *models.Error
}

func (o *BindNotFound) Error() string {
	return fmt.Sprintf("[POST /tasks/binding][%d] bindNotFound  %+v", 404, o.Payload)
}

func (o *BindNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindInternalServerError creates a BindInternalServerError with default headers values
func NewBindInternalServerError() *BindInternalServerError {
	return &BindInternalServerError{}
}

/*BindInternalServerError handles this case with default header values.

Activating task failed
*/
type BindInternalServerError struct {
	Payload *models.Error
}

func (o *BindInternalServerError) Error() string {
	return fmt.Sprintf("[POST /tasks/binding][%d] bindInternalServerError  %+v", 500, o.Payload)
}

func (o *BindInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
