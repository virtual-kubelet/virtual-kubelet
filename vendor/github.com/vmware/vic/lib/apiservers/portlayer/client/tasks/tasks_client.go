package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Bind activates an existing task

Activate a task that exists within the context of the provided handle
*/
func (a *Client) Bind(params *BindParams) (*BindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBindParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Bind",
		Method:             "POST",
		PathPattern:        "/tasks/binding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BindReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BindOK), nil

}

/*
Inspect initiates a task inspect operation

Initiates a task inspect operation
*/
func (a *Client) Inspect(params *InspectParams) (*InspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInspectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inspect",
		Method:             "GET",
		PathPattern:        "/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InspectOK), nil

}

/*
Join initiates a task join operation

Initiates a task join operation
*/
func (a *Client) Join(params *JoinParams) (*JoinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJoinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Join",
		Method:             "POST",
		PathPattern:        "/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &JoinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JoinOK), nil

}

/*
Remove initiates a task remove operation

Initiates a task remove operation
*/
func (a *Client) Remove(params *RemoveParams) (*RemoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Remove",
		Method:             "DELETE",
		PathPattern:        "/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveOK), nil

}

/*
Unbind deactivates an existing task

Deactivate a task that exists within the context of the provided handle
*/
func (a *Client) Unbind(params *UnbindParams) (*UnbindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnbindParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Unbind",
		Method:             "DELETE",
		PathPattern:        "/tasks/binding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnbindReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UnbindOK), nil

}

/*
Wait initiates a task wait operation

Initiates a task wait operation
*/
func (a *Client) Wait(params *WaitParams) (*WaitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWaitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Wait",
		Method:             "GET",
		PathPattern:        "/tasks/wait",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WaitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*WaitOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
