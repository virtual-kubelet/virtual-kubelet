package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// NewInspectParams creates a new InspectParams object
// with the default values initialized.
func NewInspectParams() *InspectParams {
	var ()
	return &InspectParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewInspectParamsWithTimeout creates a new InspectParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewInspectParamsWithTimeout(timeout time.Duration) *InspectParams {
	var ()
	return &InspectParams{

		timeout: timeout,
	}
}

// NewInspectParamsWithContext creates a new InspectParams object
// with the default values initialized, and the ability to set a context for a request
func NewInspectParamsWithContext(ctx context.Context) *InspectParams {
	var ()
	return &InspectParams{

		Context: ctx,
	}
}

// NewInspectParamsWithHTTPClient creates a new InspectParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewInspectParamsWithHTTPClient(client *http.Client) *InspectParams {
	var ()
	return &InspectParams{
		HTTPClient: client,
	}
}

/*InspectParams contains all the parameters to send to the API endpoint
for the inspect operation typically these are written to a http.Request
*/
type InspectParams struct {

	/*OpID*/
	OpID *string
	/*Config*/
	Config *models.TaskInspectConfig

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the inspect params
func (o *InspectParams) WithTimeout(timeout time.Duration) *InspectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the inspect params
func (o *InspectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the inspect params
func (o *InspectParams) WithContext(ctx context.Context) *InspectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the inspect params
func (o *InspectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the inspect params
func (o *InspectParams) WithHTTPClient(client *http.Client) *InspectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the inspect params
func (o *InspectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOpID adds the opID to the inspect params
func (o *InspectParams) WithOpID(opID *string) *InspectParams {
	o.SetOpID(opID)
	return o
}

// SetOpID adds the opId to the inspect params
func (o *InspectParams) SetOpID(opID *string) {
	o.OpID = opID
}

// WithConfig adds the config to the inspect params
func (o *InspectParams) WithConfig(config *models.TaskInspectConfig) *InspectParams {
	o.SetConfig(config)
	return o
}

// SetConfig adds the config to the inspect params
func (o *InspectParams) SetConfig(config *models.TaskInspectConfig) {
	o.Config = config
}

// WriteToRequest writes these params to a swagger request
func (o *InspectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.OpID != nil {

		// header param Op-ID
		if err := r.SetHeaderParam("Op-ID", *o.OpID); err != nil {
			return err
		}

	}

	if o.Config == nil {
		o.Config = new(models.TaskInspectConfig)
	}

	if err := r.SetBodyParam(o.Config); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
