package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// CreateVolumeReader is a Reader for the CreateVolume structure.
type CreateVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateVolumeCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewCreateVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateVolumeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateVolumeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateVolumeCreated creates a CreateVolumeCreated with default headers values
func NewCreateVolumeCreated() *CreateVolumeCreated {
	return &CreateVolumeCreated{}
}

/*CreateVolumeCreated handles this case with default header values.

Created
*/
type CreateVolumeCreated struct {
	Payload *models.VolumeResponse
}

func (o *CreateVolumeCreated) Error() string {
	return fmt.Sprintf("[POST /storage/volumes][%d] createVolumeCreated  %+v", 201, o.Payload)
}

func (o *CreateVolumeCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VolumeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeNotFound creates a CreateVolumeNotFound with default headers values
func NewCreateVolumeNotFound() *CreateVolumeNotFound {
	return &CreateVolumeNotFound{}
}

/*CreateVolumeNotFound handles this case with default header values.

VolumeStore Does not Exist
*/
type CreateVolumeNotFound struct {
	Payload *models.Error
}

func (o *CreateVolumeNotFound) Error() string {
	return fmt.Sprintf("[POST /storage/volumes][%d] createVolumeNotFound  %+v", 404, o.Payload)
}

func (o *CreateVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeConflict creates a CreateVolumeConflict with default headers values
func NewCreateVolumeConflict() *CreateVolumeConflict {
	return &CreateVolumeConflict{}
}

/*CreateVolumeConflict handles this case with default header values.

Volume already exists by that ID
*/
type CreateVolumeConflict struct {
	Payload *models.Error
}

func (o *CreateVolumeConflict) Error() string {
	return fmt.Sprintf("[POST /storage/volumes][%d] createVolumeConflict  %+v", 409, o.Payload)
}

func (o *CreateVolumeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeInternalServerError creates a CreateVolumeInternalServerError with default headers values
func NewCreateVolumeInternalServerError() *CreateVolumeInternalServerError {
	return &CreateVolumeInternalServerError{}
}

/*CreateVolumeInternalServerError handles this case with default header values.

Error
*/
type CreateVolumeInternalServerError struct {
	Payload *models.Error
}

func (o *CreateVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /storage/volumes][%d] createVolumeInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeDefault creates a CreateVolumeDefault with default headers values
func NewCreateVolumeDefault(code int) *CreateVolumeDefault {
	return &CreateVolumeDefault{
		_statusCode: code,
	}
}

/*CreateVolumeDefault handles this case with default header values.

error
*/
type CreateVolumeDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the create volume default response
func (o *CreateVolumeDefault) Code() int {
	return o._statusCode
}

func (o *CreateVolumeDefault) Error() string {
	return fmt.Sprintf("[POST /storage/volumes][%d] CreateVolume default  %+v", o._statusCode, o.Payload)
}

func (o *CreateVolumeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
