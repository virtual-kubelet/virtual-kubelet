package interaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewContainerGetStderrParams creates a new ContainerGetStderrParams object
// with the default values initialized.
func NewContainerGetStderrParams() *ContainerGetStderrParams {
	var ()
	return &ContainerGetStderrParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewContainerGetStderrParamsWithTimeout creates a new ContainerGetStderrParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewContainerGetStderrParamsWithTimeout(timeout time.Duration) *ContainerGetStderrParams {
	var ()
	return &ContainerGetStderrParams{

		timeout: timeout,
	}
}

// NewContainerGetStderrParamsWithContext creates a new ContainerGetStderrParams object
// with the default values initialized, and the ability to set a context for a request
func NewContainerGetStderrParamsWithContext(ctx context.Context) *ContainerGetStderrParams {
	var ()
	return &ContainerGetStderrParams{

		Context: ctx,
	}
}

// NewContainerGetStderrParamsWithHTTPClient creates a new ContainerGetStderrParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewContainerGetStderrParamsWithHTTPClient(client *http.Client) *ContainerGetStderrParams {
	var ()
	return &ContainerGetStderrParams{
		HTTPClient: client,
	}
}

/*ContainerGetStderrParams contains all the parameters to send to the API endpoint
for the container get stderr operation typically these are written to a http.Request
*/
type ContainerGetStderrParams struct {

	/*OpID*/
	OpID *string
	/*Deadline*/
	Deadline *strfmt.DateTime
	/*ID*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the container get stderr params
func (o *ContainerGetStderrParams) WithTimeout(timeout time.Duration) *ContainerGetStderrParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the container get stderr params
func (o *ContainerGetStderrParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the container get stderr params
func (o *ContainerGetStderrParams) WithContext(ctx context.Context) *ContainerGetStderrParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the container get stderr params
func (o *ContainerGetStderrParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the container get stderr params
func (o *ContainerGetStderrParams) WithHTTPClient(client *http.Client) *ContainerGetStderrParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the container get stderr params
func (o *ContainerGetStderrParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOpID adds the opID to the container get stderr params
func (o *ContainerGetStderrParams) WithOpID(opID *string) *ContainerGetStderrParams {
	o.SetOpID(opID)
	return o
}

// SetOpID adds the opId to the container get stderr params
func (o *ContainerGetStderrParams) SetOpID(opID *string) {
	o.OpID = opID
}

// WithDeadline adds the deadline to the container get stderr params
func (o *ContainerGetStderrParams) WithDeadline(deadline *strfmt.DateTime) *ContainerGetStderrParams {
	o.SetDeadline(deadline)
	return o
}

// SetDeadline adds the deadline to the container get stderr params
func (o *ContainerGetStderrParams) SetDeadline(deadline *strfmt.DateTime) {
	o.Deadline = deadline
}

// WithID adds the id to the container get stderr params
func (o *ContainerGetStderrParams) WithID(id string) *ContainerGetStderrParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the container get stderr params
func (o *ContainerGetStderrParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *ContainerGetStderrParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.OpID != nil {

		// header param Op-ID
		if err := r.SetHeaderParam("Op-ID", *o.OpID); err != nil {
			return err
		}

	}

	if o.Deadline != nil {

		// query param deadline
		var qrDeadline strfmt.DateTime
		if o.Deadline != nil {
			qrDeadline = *o.Deadline
		}
		qDeadline := qrDeadline.String()
		if qDeadline != "" {
			if err := r.SetQueryParam("deadline", qDeadline); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
