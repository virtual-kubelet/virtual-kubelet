package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// NewCreateImageStoreParams creates a new CreateImageStoreParams object
// with the default values initialized.
func NewCreateImageStoreParams() *CreateImageStoreParams {
	var ()
	return &CreateImageStoreParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateImageStoreParamsWithTimeout creates a new CreateImageStoreParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateImageStoreParamsWithTimeout(timeout time.Duration) *CreateImageStoreParams {
	var ()
	return &CreateImageStoreParams{

		timeout: timeout,
	}
}

// NewCreateImageStoreParamsWithContext creates a new CreateImageStoreParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateImageStoreParamsWithContext(ctx context.Context) *CreateImageStoreParams {
	var ()
	return &CreateImageStoreParams{

		Context: ctx,
	}
}

// NewCreateImageStoreParamsWithHTTPClient creates a new CreateImageStoreParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateImageStoreParamsWithHTTPClient(client *http.Client) *CreateImageStoreParams {
	var ()
	return &CreateImageStoreParams{
		HTTPClient: client,
	}
}

/*CreateImageStoreParams contains all the parameters to send to the API endpoint
for the create image store operation typically these are written to a http.Request
*/
type CreateImageStoreParams struct {

	/*OpID*/
	OpID *string
	/*Body*/
	Body *models.ImageStore

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create image store params
func (o *CreateImageStoreParams) WithTimeout(timeout time.Duration) *CreateImageStoreParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create image store params
func (o *CreateImageStoreParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create image store params
func (o *CreateImageStoreParams) WithContext(ctx context.Context) *CreateImageStoreParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create image store params
func (o *CreateImageStoreParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create image store params
func (o *CreateImageStoreParams) WithHTTPClient(client *http.Client) *CreateImageStoreParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create image store params
func (o *CreateImageStoreParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOpID adds the opID to the create image store params
func (o *CreateImageStoreParams) WithOpID(opID *string) *CreateImageStoreParams {
	o.SetOpID(opID)
	return o
}

// SetOpID adds the opId to the create image store params
func (o *CreateImageStoreParams) SetOpID(opID *string) {
	o.OpID = opID
}

// WithBody adds the body to the create image store params
func (o *CreateImageStoreParams) WithBody(body *models.ImageStore) *CreateImageStoreParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the create image store params
func (o *CreateImageStoreParams) SetBody(body *models.ImageStore) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *CreateImageStoreParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.OpID != nil {

		// header param Op-ID
		if err := r.SetHeaderParam("Op-ID", *o.OpID); err != nil {
			return err
		}

	}

	if o.Body == nil {
		o.Body = new(models.ImageStore)
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
