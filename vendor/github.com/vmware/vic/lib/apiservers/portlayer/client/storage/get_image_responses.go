package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/vic/lib/apiservers/portlayer/models"
)

// GetImageReader is a Reader for the GetImage structure.
type GetImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetImageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetImageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetImageDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetImageOK creates a GetImageOK with default headers values
func NewGetImageOK() *GetImageOK {
	return &GetImageOK{}
}

/*GetImageOK handles this case with default header values.

OK
*/
type GetImageOK struct {
	Payload *models.Image
}

func (o *GetImageOK) Error() string {
	return fmt.Sprintf("[GET /storage/{store_name}/info/{id}][%d] getImageOK  %+v", 200, o.Payload)
}

func (o *GetImageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Image)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImageNotFound creates a GetImageNotFound with default headers values
func NewGetImageNotFound() *GetImageNotFound {
	return &GetImageNotFound{}
}

/*GetImageNotFound handles this case with default header values.

Not found
*/
type GetImageNotFound struct {
	Payload *models.Error
}

func (o *GetImageNotFound) Error() string {
	return fmt.Sprintf("[GET /storage/{store_name}/info/{id}][%d] getImageNotFound  %+v", 404, o.Payload)
}

func (o *GetImageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImageDefault creates a GetImageDefault with default headers values
func NewGetImageDefault(code int) *GetImageDefault {
	return &GetImageDefault{
		_statusCode: code,
	}
}

/*GetImageDefault handles this case with default header values.

error
*/
type GetImageDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get image default response
func (o *GetImageDefault) Code() int {
	return o._statusCode
}

func (o *GetImageDefault) Error() string {
	return fmt.Sprintf("[GET /storage/{store_name}/info/{id}][%d] GetImage default  %+v", o._statusCode, o.Payload)
}

func (o *GetImageDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
