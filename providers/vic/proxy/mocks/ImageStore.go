// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import metadata "github.com/vmware/vic/lib/metadata"
import mock "github.com/stretchr/testify/mock"

import trace "github.com/vmware/vic/pkg/trace"

// ImageStore is an autogenerated mock type for the ImageStore type
type ImageStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: op, idOrRef, tag, actuate
func (_m *ImageStore) Get(op trace.Operation, idOrRef string, tag string, actuate bool) (*metadata.ImageConfig, error) {
	ret := _m.Called(op, idOrRef, tag, actuate)

	var r0 *metadata.ImageConfig
	if rf, ok := ret.Get(0).(func(trace.Operation, string, string, bool) *metadata.ImageConfig); ok {
		r0 = rf(op, idOrRef, tag, actuate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.ImageConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(trace.Operation, string, string, bool) error); ok {
		r1 = rf(op, idOrRef, tag, actuate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImages provides a mock function with given fields: op
func (_m *ImageStore) GetImages(op trace.Operation) []*metadata.ImageConfig {
	ret := _m.Called(op)

	var r0 []*metadata.ImageConfig
	if rf, ok := ret.Get(0).(func(trace.Operation) []*metadata.ImageConfig); ok {
		r0 = rf(op)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metadata.ImageConfig)
		}
	}

	return r0
}

// PullImage provides a mock function with given fields: op, image, tag, username, password
func (_m *ImageStore) PullImage(op trace.Operation, image string, tag string, username string, password string) error {
	ret := _m.Called(op, image, tag, username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(trace.Operation, string, string, string, string) error); ok {
		r0 = rf(op, image, tag, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
